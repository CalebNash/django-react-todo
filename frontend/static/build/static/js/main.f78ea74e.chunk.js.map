{"version":3,"sources":["components/TodoList.js","components/TodoForm.js","Todo.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","onClick","editTodo","todo","id","title","removeTodo","TodoList","todos","map","key","Fragment","BlogForm","state","checked","handleChange","bind","event","this","setState","target","name","value","onSubmit","handleSubmit","htmlFor","onChange","React","Component","Todo","fetch","then","responce","json","data","catch","error","console","log","preventDefault","method","headers","body","JSON","stringify","index","findIndex","splice","response","TodoForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f78ea74e.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction TodoItem(props){\n\n  return(\n    <div className='list-group'>\n      <div className='list-group-item'>\n        <input className='toggle done-todo' type='checkbox' onClick={() => props.editTodo(props.todo, props.todo.id)}/>\n        <p className='todo-title'>{props.todo.title}</p>\n        <button className=\"btn delete\"type=\"button\" onClick={() => props.removeTodo(props.todo.id)}><i id=\"orderButton\" className=\"fas fa-times\"></i></button>\n      </div>\n    </div>\n  )\n}\n\n\n\nfunction TodoList(props){\n  const todos = props.todos.map(todo => <TodoItem key={todo.id} todo={todo} removeTodo={props.removeTodo} editTodo={props.editTodo}/>)\n  return (\n    <React.Fragment>\n      <div className='col-12 col-md-4'>{todos}</div>\n    </React.Fragment>\n  )\n}\n\nexport default TodoList ;\n","import React from 'react'\n\nclass BlogForm extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      title: '',\n      checked: 'false'\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  render(){\n    return(\n      <form className=\"col-12 col-md-6 mb-5\" onSubmit={(event) => this.props.handleSubmit(event, this.state)}>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" className=\"form-control\" id=\"title\" name=\"title\" value={this.state.title} onChange={this.handleChange}/>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n      </form>\n    )\n  }\n}\n\nexport default BlogForm;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm'\nimport './App.css';\n\nclass Todo extends React.Component{\n  constructor(props){\n  super(props)\n  this.state = {\n    todos: [],\n  }\nthis.handleSubmit = this.handleSubmit.bind(this);\nthis.removeTodo = this.removeTodo.bind(this);\nthis.editTodo = this.editTodo.bind(this);\n}\n\ncomponentDidMount() {\n  fetch('/api/v1/')\n    .then(responce => responce.json())\n    .then(data => this.setState({todos: data}))\n    .catch(error => console.log('Error: ', error));\n  }\n\n  handleSubmit(event, data){\n    event.preventDefault();\n    fetch('/api/v1/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n    })\n    .then(responce => responce.json())\n    .then(data => {\n    const todos = [...this.state.todos, data];\n    this.setState({todos: todos});\n  })\n  }\n\n  removeTodo(id) {\n      fetch(`/api/v1/${id}/`, {\n        method: 'DELETE',\n      })\n      .then(responce => responce)\n      .then(data => {\n        const todos = [...this.state.todos];\n        const index = todos.findIndex(todo => todo.id === id)\n        todos.splice(index,1);\n        this.setState({todos})\n      })\n      .catch(error => console.log('Error:', error))\n    }\n\n    editTodo(data, id){\n      if(data.checked === false){\n        data.checked = true;\n      }else if(data.checked === true){\n        data.checked = false;\n      }\n      fetch(`api/v1/${id}/`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      })\n      .then(response => response.json())\n      .then(responce => console.log(responce))\n      .catch(error => console.log('Error:', error));\n  }\n\n\n\n  render(){\n    return (\n      <div className='container'>\n        <h1 className='name-of project'>TODOS</h1>\n        <TodoForm handleSubmit= {this.handleSubmit}/>\n        <TodoList todos={this.state.todos} removeTodo={this.removeTodo}  editTodo={this.editTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport Todo from './Todo';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}